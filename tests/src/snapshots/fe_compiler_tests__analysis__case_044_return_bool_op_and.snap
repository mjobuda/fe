---
source: tests/src/analysis.rs
expression: "build_snapshot(fixture, &src, &context)"

---
ModuleAttributes {
    type_defs: {
        "Foo": Contract(
            Contract {
                name: "Foo",
                functions: [
                    FunctionAttributes {
                        is_public: true,
                        name: "bar",
                        params: [
                            (
                                "x",
                                Base(
                                    Bool,
                                ),
                            ),
                            (
                                "y",
                                Base(
                                    Bool,
                                ),
                            ),
                        ],
                        return_type: Base(
                            Bool,
                        ),
                    },
                ],
            },
        ),
    },
}

note: 
  ┌─ features/return_bool_op_and.fe:3:16
  │
3 │         return x and y
  │                ^ attributes hash: 10866140763116710699
  │
  = ExpressionAttributes {
        typ: Base(
            Bool,
        ),
        location: Value,
        move_location: None,
    }

note: 
  ┌─ features/return_bool_op_and.fe:3:22
  │
3 │         return x and y
  │                      ^ attributes hash: 10866140763116710699
  │
  = ExpressionAttributes {
        typ: Base(
            Bool,
        ),
        location: Value,
        move_location: None,
    }

note: 
  ┌─ features/return_bool_op_and.fe:3:16
  │
3 │         return x and y
  │                ^^^^^^^ attributes hash: 10866140763116710699
  │
  = ExpressionAttributes {
        typ: Base(
            Bool,
        ),
        location: Value,
        move_location: None,
    }

note: 
  ┌─ features/return_bool_op_and.fe:2:5
  │  
2 │ ╭     pub def bar(x: bool, y: bool) -> bool:
3 │ │         return x and y
  │ ╰──────────────────────^ attributes hash: 12504548879835873590
  │  
  = FunctionAttributes {
        is_public: true,
        name: "bar",
        params: [
            (
                "x",
                Base(
                    Bool,
                ),
            ),
            (
                "y",
                Base(
                    Bool,
                ),
            ),
        ],
        return_type: Base(
            Bool,
        ),
    }

note: 
  ┌─ features/return_bool_op_and.fe:1:1
  │  
1 │ ╭ contract Foo:
2 │ │     pub def bar(x: bool, y: bool) -> bool:
3 │ │         return x and y
  │ ╰──────────────────────^ attributes hash: 11916709975174477393
  │  
  = ContractAttributes {
        public_functions: [
            FunctionAttributes {
                is_public: true,
                name: "bar",
                params: [
                    (
                        "x",
                        Base(
                            Bool,
                        ),
                    ),
                    (
                        "y",
                        Base(
                            Bool,
                        ),
                    ),
                ],
                return_type: Base(
                    Bool,
                ),
            },
        ],
        init_function: None,
        events: [],
        string_literals: {},
        structs: [],
        external_contracts: [],
        created_contracts: {},
    }

note: 
  ┌─ features/return_bool_op_and.fe:2:20
  │
2 │     pub def bar(x: bool, y: bool) -> bool:
  │                    ^^^^ attributes hash: 8311861578736502650
  │
  = Base(
        Bool,
    )

note: 
  ┌─ features/return_bool_op_and.fe:2:29
  │
2 │     pub def bar(x: bool, y: bool) -> bool:
  │                             ^^^^ attributes hash: 8311861578736502650
  │
  = Base(
        Bool,
    )

note: 
  ┌─ features/return_bool_op_and.fe:2:38
  │
2 │     pub def bar(x: bool, y: bool) -> bool:
  │                                      ^^^^ attributes hash: 8311861578736502650
  │
  = Base(
        Bool,
    )



---
source: tests/src/analysis.rs
expression: "build_snapshot(fixture, &src, &context)"

---
ModuleAttributes {
    type_defs: {
        "Foo": Contract(
            Contract {
                name: "Foo",
                functions: [
                    FunctionAttributes {
                        is_public: true,
                        name: "bar",
                        params: [],
                        return_type: Array(
                            Array {
                                size: 32,
                                inner: Byte,
                            },
                        ),
                    },
                ],
            },
        ),
    },
}

note: 
  ┌─ features/return_msg_sig.fe:4:9
  │
4 │         msg_sig = msg.sig
  │         ^^^^^^^ attributes hash: 10306023770505947435
  │
  = ExpressionAttributes {
        typ: Array(
            Array {
                size: 32,
                inner: Byte,
            },
        ),
        location: Memory,
        move_location: None,
    }

note: 
  ┌─ features/return_msg_sig.fe:4:19
  │
4 │         msg_sig = msg.sig
  │                   ^^^^^^^ attributes hash: 2120953519987356880
  │
  = ExpressionAttributes {
        typ: Array(
            Array {
                size: 32,
                inner: Byte,
            },
        ),
        location: Value,
        move_location: None,
    }

note: 
  ┌─ features/return_msg_sig.fe:5:16
  │
5 │         return msg_sig
  │                ^^^^^^^ attributes hash: 10306023770505947435
  │
  = ExpressionAttributes {
        typ: Array(
            Array {
                size: 32,
                inner: Byte,
            },
        ),
        location: Memory,
        move_location: None,
    }

note: 
  ┌─ features/return_msg_sig.fe:2:5
  │  
2 │ ╭     pub def bar() -> bytes[32]:
3 │ │         msg_sig: bytes[32]
4 │ │         msg_sig = msg.sig
5 │ │         return msg_sig
  │ ╰──────────────────────^ attributes hash: 4777280719977385695
  │  
  = FunctionAttributes {
        is_public: true,
        name: "bar",
        params: [],
        return_type: Array(
            Array {
                size: 32,
                inner: Byte,
            },
        ),
    }

note: 
  ┌─ features/return_msg_sig.fe:3:9
  │
3 │         msg_sig: bytes[32]
  │         ^^^^^^^^^^^^^^^^^^ attributes hash: 11241566943402129315
  │
  = Array(
        Array {
            size: 32,
            inner: Byte,
        },
    )

note: 
  ┌─ features/return_msg_sig.fe:1:1
  │  
1 │ ╭ contract Foo:
2 │ │     pub def bar() -> bytes[32]:
3 │ │         msg_sig: bytes[32]
4 │ │         msg_sig = msg.sig
5 │ │         return msg_sig
  │ ╰──────────────────────^ attributes hash: 11415107133512128527
  │  
  = ContractAttributes {
        public_functions: [
            FunctionAttributes {
                is_public: true,
                name: "bar",
                params: [],
                return_type: Array(
                    Array {
                        size: 32,
                        inner: Byte,
                    },
                ),
            },
        ],
        init_function: None,
        events: [],
        string_literals: {},
        structs: [],
        external_contracts: [],
        created_contracts: {},
    }

note: 
  ┌─ features/return_msg_sig.fe:2:22
  │
2 │     pub def bar() -> bytes[32]:
  │                      ^^^^^ attributes hash: 16931239362436195516
  │
  = Base(
        Byte,
    )

note: 
  ┌─ features/return_msg_sig.fe:2:22
  │
2 │     pub def bar() -> bytes[32]:
  │                      ^^^^^^^^^ attributes hash: 11241566943402129315
  │
  = Array(
        Array {
            size: 32,
            inner: Byte,
        },
    )

note: 
  ┌─ features/return_msg_sig.fe:3:18
  │
3 │         msg_sig: bytes[32]
  │                  ^^^^^ attributes hash: 16931239362436195516
  │
  = Base(
        Byte,
    )

note: 
  ┌─ features/return_msg_sig.fe:3:18
  │
3 │         msg_sig: bytes[32]
  │                  ^^^^^^^^^ attributes hash: 11241566943402129315
  │
  = Array(
        Array {
            size: 32,
            inner: Byte,
        },
    )



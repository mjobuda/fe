var searchIndex = JSON.parse('{\
"fe":{"doc":"Fe is an emerging smart contract language for the …","t":[0,5,17,17,4,13,13,13,13,13,13,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["_utils","pretty_curly_print","DEFAULT_OUTPUT_DIR_NAME","VERSION","CompilationTarget","Abi","Ast","LoweredAst","Bytecode","Tokens","Yul","variants","main","write_compiled_module","write_output","ioerr_to_string","verify_nonexistent_or_empty","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","eq","fmt","fmt","from_str"],"q":["fe","fe::_utils","fe","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Formats any kind of structured text that uses curly …","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["usize",15],["str",15]],["string",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[["str",15],["bool",15],["compiledmodule",3]],[["string",3],["result",4]]],[[["path",3],["str",15]],[["string",3],["result",4]]],[[["error",3]],["string",3]],[[["path",3]],[["string",3],["result",4]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["compilationtarget",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["str",15]],["result",4]]],"p":[[4,"CompilationTarget"]]},\
"fe_analyzer":{"doc":"Fe semantic analysis.","t":[0,4,13,13,13,4,13,4,13,13,4,13,13,13,13,13,4,13,13,13,13,4,13,4,13,13,13,4,13,13,4,13,0,17,0,3,12,12,12,4,13,12,13,13,11,3,12,12,12,12,12,12,12,12,3,12,12,12,11,11,11,11,4,13,12,13,12,13,12,13,13,12,12,3,12,12,12,12,11,11,3,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,3,3,4,13,13,4,13,13,13,13,13,3,12,0,0,3,12,12,12,12,11,11,11,11,11,11,0,6,3,12,12,12,12,12,3,12,12,3,12,12,3,12,12,12,12,12,12,12,12,12,3,12,12,12,12,4,13,13,13,4,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,5,5,8,10,3,12,12,4,13,12,13,4,13,12,12,13,12,13,12,4,13,13,3,12,12,12,8,10,10,10,10,8,10,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,4,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,17,3,12,12,3,12,12,3,12,3,12,12,3,12,3,12,12,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["builtins","ValueMethod","Clone","ToMem","AbiEncode","GlobalMethod","Keccak256","ContractTypeMethod","Create","Create2","Object","Block","Chain","Msg","Tx","Self_","BlockField","Coinbase","Difficulty","Number","Timestamp","ChainField","Id","MsgField","Sender","Sig","Value","TxField","GasPrice","Origin","SelfField","Address","constants","MAX_INDEXED_EVENT_FIELDS","context","Label","style","span","message","Location","Storage","nonce","Memory","Value","assign_location","ContractAttributes","public_functions","init_function","events","list_expressions","string_literals","structs","external_contracts","created_contracts","ExpressionAttributes","typ","location","move_location","new","into_cloned","into_loaded","final_location","CallType","BuiltinFunction","func","TypeConstructor","typ","SelfAttribute","func_name","ValueAttribute","TypeAttribute","typ","func_name","FunctionAttributes","is_public","name","params","return_type","param_types","param_names","ModuleAttributes","type_defs","tuples_used","Context","node_ids","spans","expressions","emits","functions","declarations","contracts","calls","events","type_descs","module","file_id","diagnostics","new_shared","new","add_expression","update_expression","get_expression","add_emit","get_emit","add_function","get_function","add_declaration","get_declaration","add_contract","get_contract","add_call","get_call","add_event","get_event","add_type_desc","get_type_desc","set_module","get_module","get_spanned_expressions","get_spanned_emits","get_spanned_functions","get_spanned_declarations","get_spanned_contracts","get_spanned_calls","get_spanned_events","get_spanned_type_descs","error","type_error","not_yet_implemented","fancy_error","make_unique_name","errors","AlreadyDefined","FatalError","CannotMove","TypeError","IndexingError","WrongIndexType","NotSubscriptable","BinaryOperationError","TypesNotEqual","TypesNotNumeric","RightTooLarge","RightIsSigned","NotEqualAndUnsigned","AnalyzerError","0","namespace","events","EventDef","name","topic","fields","indexed_fields","new","indexed_field_types_with_index","non_indexed_field_types_with_index","non_indexed_field_types","iter_field_types","has_field","scopes","Shared","ContractFunctionDef","is_public","name","params","return_type","scope","ContractFieldDef","nonce","typ","ModuleScope","type_defs","tuples_used","ContractScope","name","parent","interface","event_defs","field_defs","function_defs","list_expressions","string_defs","created_contracts","BlockScope","name","parent","variable_defs","typ","Scope","Module","Contract","Block","BlockScopeParent","Contract","Block","BlockScopeType","Function","IfElse","Loop","module_scope","new","add_type_def","get_type_defs","get_type_def","new","module_scope","get_module_type_defs","event_def","field_def","function_def","add_field","add_function","add_event","add_string","add_created_contract","add_used_list_expression","new","from_contract_scope","from_block_scope","contract_scope","module_scope","function_scope","contract_event_def","contract_field_def","contract_function_def","current_function_def","get_variable_def","add_var","inherits_type","get_module_type_defs","get_module_type_def","types","u256_min","u256_max","i256_max","i256_min","FeSized","size","AbiUintSize","data_size","padded_size","AbiArraySize","Static","size","Dynamic","AbiType","Array","inner","size","Tuple","elems","Uint","size","AbiDecodeLocation","Calldata","Memory","AbiComponent","name","typ","components","AbiEncoding","abi_json_name","abi_selector_name","abi_components","abi_type","SafeNames","lower_snake","Type","Base","Array","Map","Tuple","String","Contract","Struct","FixedSize","Base","Array","Tuple","String","Contract","Struct","Base","Numeric","Bool","Byte","Address","Unit","Integer","U256","U128","U64","U32","U16","U8","I256","I128","I64","I32","I16","I8","U256","Array","size","inner","Map","key","value","Tuple","items","Struct","name","fields","FeString","max_size","Contract","name","functions","new","is_empty","add_field","get_field_type","get_field_index","is_signed","can_hold","fits","is_signed_integer","unit","int","TypeDowncast","as_array","as_tuple","as_string","as_map","as_int","is_unit","bool","unit","analyze","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","size","size","size","size","size","size","size","size","abi_json_name","abi_selector_name","abi_components","abi_type","abi_json_name","abi_selector_name","abi_components","abi_type","abi_json_name","abi_selector_name","abi_components","abi_type","abi_json_name","abi_selector_name","abi_components","abi_type","abi_json_name","abi_selector_name","abi_components","abi_type","abi_json_name","abi_selector_name","abi_components","abi_type","abi_json_name","abi_selector_name","abi_components","abi_type","lower_snake","lower_snake","lower_snake","lower_snake","lower_snake","lower_snake","lower_snake","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_string","to_string","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","try_from","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","primary","secondary","into_cs_label"],"q":["fe_analyzer","fe_analyzer::builtins","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer","fe_analyzer::constants","fe_analyzer","fe_analyzer::context","","","","","","fe_analyzer::context::Location","fe_analyzer::context","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::context::CallType","fe_analyzer::context","fe_analyzer::context::CallType","fe_analyzer::context","fe_analyzer::context::CallType","fe_analyzer::context","","fe_analyzer::context::CallType","","fe_analyzer::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer","fe_analyzer::errors","","","","","","","","","","","","","","","fe_analyzer","fe_analyzer::namespace","fe_analyzer::namespace::events","","","","","","","","","","","fe_analyzer::namespace","fe_analyzer::namespace::scopes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::namespace","fe_analyzer::namespace::types","","","","","","","","","","","fe_analyzer::namespace::types::AbiArraySize","fe_analyzer::namespace::types","","","fe_analyzer::namespace::types::AbiType","","fe_analyzer::namespace::types","fe_analyzer::namespace::types::AbiType","fe_analyzer::namespace::types","fe_analyzer::namespace::types::AbiType","fe_analyzer::namespace::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer","fe_analyzer::builtins","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::namespace::events","","","","","","","","","fe_analyzer::namespace::scopes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::namespace::typesfe_analyzer::context","","","fe_analyzer::namespace::types","","","","fe_analyzer::builtins","fe_analyzer::context","","","","","","","fe_analyzer::namespace::events","fe_analyzer::namespace::scopes","","","","","","","","fe_analyzer::namespace::types","","","","","","","","","","","","","","","fe_analyzer::context","fe_analyzer::namespace::types","","","","","","","","","","","","","fe_analyzer::builtins","","","","","","","","","fe_analyzer::context","","","","","","","","","","","","fe_analyzer::errors","","fe_analyzer::namespace::events","","fe_analyzer::namespace::scopes","","","","","","","","","","","","","","","fe_analyzer::namespace::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::context","fe_analyzer::namespace::types","","","","","","","","","","","","","fe_analyzer::builtins","","","","","","","","","","","fe_analyzer::context","","","","","","","fe_analyzer::errors","","","","","","","fe_analyzer::namespace::events","fe_analyzer::namespace::scopes","","","","","","","","fe_analyzer::namespace::types","","","","","","","","","","","","","","","","","","","","","","","","","fe_analyzer::builtins","fe_analyzer::context","","","","","fe_analyzer::namespace::events","fe_analyzer::namespace::types","","","","","","","","","","","fe_analyzer::builtins","","","","","","","","","fe_analyzer::context","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Indicates where an expression is stored.","A storage value may not have a nonce known at compile …","","","","The expected location of a value with the given type when …","Contains contextual information relating to a contract …","Public functions that have been defined by the user.","An init function that has been defined by the user.","Events that have been defined by the user.","List expressions that the contract uses","Static strings that the contract defines","Structs that have been defined by the user","External contracts that may be called from within this …","Names of contracts that have been created inside of this …","Contains contextual information relating to an expression …","","","","","Adds a move to memory.","Adds a move to value, if it is in storage or memory.","The final location of an expression after a possible move.","The type of a function call.","","","","","","","","","","","Contains contextual information relating to a function …","","","","","","","","Type definitions in a module.","Tuples that were used inside of a module.","Contains contextual information about a Fe module and can …","Node ids in the order they were visited.","The span of a given node id.","","","","","","","","","","","","","","Attribute contextual information to an expression node.","Update the expression attributes.","Get information that has been attributed to an expression …","Attribute contextual information to an emit statement …","Get information that has been attributed to an emit …","Attribute contextual information to a function definition …","Get information that has been attributed to a function …","Attribute contextual information to a declaration node.","Get information that has been attributed to a declaration …","Attribute contextual information to a contract definition …","Get information that has been attributed to a contract …","Attribute contextual information to a call expression …","Get information that has been attributed to a call …","Attribute contextual information to an event definition …","Get information that has been attributed to an event …","Attribute contextual information to a type description …","Get information that has been attributed to a type …","Attribute contextual information to the module.","Get information that has been attributed to the module.","Get the span and attributes of all expressions.","Get the span and attributes of all emits.","Get the span and attributes of all functions.","Get the span and attributes of all declarations.","Get the span and attributes of all contracts.","Get the span and attributes of all calls.","Get the span and attributes of all events.","Get the span and attributes of all type descs.","","","","","Makes a unique name from the given name, keeping it as …","Semantic errors.","Error to be returned from APIs that should reject …","Error to be returned when otherwise no meaningful …","Error indicating that a value can not move between memory …","Error indicating that a value has the wrong type","Errors that can result from indexing","","","Errors that can result from a binary operation","","","","","","","","","","","","","","","","The event’s indexed fields.","The event’s non-indexed fields.","The event’s non-indexed field types.","The event’s field types.","","","","","","","","","","","","","","Type definitions in a module.","Tuples that were used inside of a module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add a type definiton to the scope","Filter module scope for type definitions that match the …","Gets a type definition by name.","","Return the module scope that the contract scope inherits …","Filter module scope for type definitions that match the …","Lookup contract event definition by its name.","Lookup contract field definition by its name.","Lookup contract function definition by its name.","Add a contract field definition to the scope.","Add a function definition to the scope.","Add an event definition to the scope.","Add a static string definition to the scope.","Add the name of another contract that has been created …","Add the array type of a list expression that was used …","","Create a block scope from a contract scope.","Create a block scope from another block scope.","Return the contract scope that the block scope inherits …","Return the module scope that the block scope inherits from","Return the block scope that is associated with the …","Lookup an event definition on the inherited contract scope","Lookup a field definition on the inherited contract scope","Lookup a function definition on the inherited contract …","Lookup the function definition for the current block …","Lookup a definition in current or inherited block scope","Add a variable to the block scope.","Return true if the scope or any of its parents is of the …","Filter module scope for type definitions that match the …","Gets a type definition by name.","","","","","","The type has a constant size known to the compiler.","Constant size of the type.","The size of uint element in the ABI encoding.","","","The size of an array.","","","","The type of an element in terms of the ABI spec.","Array elements consist of a dynamically- or …","","","","","All elements are encoded as a uint or set of uints.","","Data can be decoded from memory or calldata.","","","Single component of a tuple.","","","The subcomponents of the component.","Information relevant to ABI encoding.","Name of the type as it appears in the Json ABI.","Name of the type as it appears in the selector preimage.","The components of an ABI tuple.","The ABI type of a Fe type.","Names that can be used to build identifiers without …","Name in the lower snake format (e.g. lower_snake_case).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>true</code> if the struct does not have any fields, …","Add a field to the struct","Return the type of the given field name","Return the index of the given field name","Returns <code>true</code> if the integer is signed, otherwise <code>false</code>","Returns <code>true</code> if the integer is at least the same size (or …","Returns <code>true</code> if <code>num</code> represents a number that fits the type","","","","","","","","","","Returns true if the type is <code>()</code>.","Creates an instance of bool.","Creates an instance of <code>()</code>.","Performs semantic analysis of the source program and …reate a primary label with the given message. This will …","Create a secondary label with the given message. This …","Convert into a [<code>codespan_reporting::Diagnostic::Label</code>]"],"i":[0,0,1,1,1,0,2,0,3,3,0,4,4,4,4,4,0,5,5,5,5,0,6,0,7,7,7,0,8,8,0,9,0,0,0,0,10,10,10,0,11,12,11,11,11,0,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,0,15,16,15,17,15,18,15,15,19,19,0,20,20,20,20,20,20,0,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,0,23,23,0,24,24,24,24,24,0,25,0,0,0,26,26,26,26,26,26,26,26,26,26,0,0,0,27,27,27,27,27,0,28,28,0,29,29,0,30,30,30,30,30,30,30,30,30,0,31,31,31,31,0,32,32,32,0,33,33,0,34,34,34,32,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,0,0,35,0,36,36,0,37,38,37,0,39,40,40,39,41,39,42,0,43,43,0,44,44,44,0,45,45,45,45,0,46,0,47,47,47,47,47,47,47,0,48,48,48,48,48,48,0,49,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,50,50,0,0,51,51,0,52,52,0,53,0,54,54,0,55,0,56,56,54,54,54,54,54,50,50,50,47,47,47,0,57,57,57,57,57,48,48,48,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,58,58,58,58,58,58,58,59,59,59,59,59,59,59,60,60,60,60,60,60,60,61,61,61,61,61,61,61,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,39,39,39,39,39,39,39,39,39,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,48,50,49,51,53,54,55,56,48,48,48,48,49,49,49,49,51,51,51,51,54,54,54,54,53,53,53,53,56,56,56,56,55,55,55,55,48,49,51,54,53,56,55,13,20,21,47,47,48,48,2,11,13,14,15,20,21,22,26,27,28,29,30,31,32,33,34,36,37,39,43,44,47,48,49,50,51,52,53,54,55,56,20,36,37,39,43,44,48,49,50,51,53,54,55,56,1,2,3,4,5,6,7,8,9,11,11,13,13,14,14,15,15,20,20,21,21,23,24,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,36,36,37,37,39,39,43,44,44,47,47,48,48,49,49,50,51,51,52,52,53,53,54,54,55,55,56,56,48,20,36,37,39,43,44,48,49,50,51,53,54,55,56,3,4,1,2,3,4,5,6,7,8,9,11,13,14,15,20,21,22,58,59,60,61,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,43,44,47,48,49,50,51,52,53,54,55,56,47,48,49,50,51,52,53,55,56,54,2,11,13,14,15,20,26,47,48,49,50,51,52,53,54,55,56,48,1,2,3,4,5,6,7,8,9,10,10,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["fixedsize",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["type",4],["location",4]]],[[]],[[],[["result",4],["cannotmove",3]]],[[],["location",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["vec",3],["fixedsize",4]]],[[],[["vec",3],["string",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["sourcefileid",3]],["shared",6]],[[["sourcefileid",3]]],[[["expressionattributes",3],["node",3]]],[[["expressionattributes",3],["node",3]]],[[["into",8],["nodeid",3]],[["option",4],["expressionattributes",3]]],[[["eventdef",3],["node",3]]],[[["into",8],["nodeid",3]],[["eventdef",3],["option",4]]],[[["functionattributes",3],["node",3]]],[[["into",8],["nodeid",3]],[["option",4],["functionattributes",3]]],[[["fixedsize",4],["node",3]]],[[["into",8],["nodeid",3]],[["fixedsize",4],["option",4]]],[[["node",3],["contractattributes",3]]],[[["into",8],["nodeid",3]],[["option",4],["contractattributes",3]]],[[["calltype",4],["node",3]]],[[["into",8],["nodeid",3]],[["option",4],["calltype",4]]],[[["eventdef",3],["node",3]]],[[["into",8],["nodeid",3]],[["eventdef",3],["option",4]]],[[["node",3],["type",4]]],[[["into",8],["nodeid",3]],[["option",4],["type",4]]],[[["moduleattributes",3]]],[[],[["moduleattributes",3],["option",4]]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["label",3],["vec",3],["string",3],["vec",3]]],[[["str",15]],["string",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["str",15],["vec",3],["vec",3]]],[[],["vec",3]],[[],["vec",3]],[[],[["vec",3],["fixedsize",4]]],[[]],[[["str",15]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["shared",6],["modulescope",3]]],[[],["shared",6]],[[["type",4],["str",15]],[["result",4],["alreadydefined",3]]],[[["fnmut",8]],["vec",3]],[[["str",15]],[["option",4],["type",4]]],[[["shared",6],["modulescope",3],["str",15]],["shared",6]],[[],[["shared",6],["modulescope",3]]],[[["fnmut",8]],["vec",3]],[[["str",15]],[["option",4],["eventdef",3]]],[[["str",15]],[["option",4],["contractfielddef",3]]],[[["str",15]],[["contractfunctiondef",3],["option",4]]],[[["type",4],["str",15]],[["result",4],["alreadydefined",3]]],[[["str",15],["fixedsize",4],["blockscope",3],["bool",15],["shared",6],["vec",3]],[["result",4],["contractfunctiondef",3],["alreadydefined",3]]],[[["eventdef",3],["str",15]],[["result",4],["alreadydefined",3]]],[[["str",15]]],[[["str",15]]],[[["array",3]]],[[["blockscopeparent",4],["blockscopetype",4],["str",15]],["shared",6]],[[["shared",6],["contractscope",3],["str",15]],["shared",6]],[[["shared",6],["blockscopetype",4],["blockscope",3]],["shared",6]],[[],[["shared",6],["contractscope",3]]],[[],[["shared",6],["modulescope",3]]],[[],[["blockscope",3],["shared",6]]],[[["str",15]],[["option",4],["eventdef",3]]],[[["str",15]],[["option",4],["contractfielddef",3]]],[[["str",15]],[["contractfunctiondef",3],["option",4]]],[[],[["contractfunctiondef",3],["option",4]]],[[["str",15]],[["option",4],["fixedsize",4]]],[[["fixedsize",4],["str",15]],[["result",4],["alreadydefined",3]]],[[["blockscopetype",4]],["bool",15]],[[["fnmut",8]],["vec",3]],[[["str",15]],[["option",4],["type",4]]],null,[[],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],null,[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["string",3]],[[],["string",3]],[[],[["vec",3],["abicomponent",3]]],[[],["abitype",4]],null,[[],["string",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["struct",3]],[[],["bool",15]],[[["fixedsize",4],["str",15]],[["result",4],["alreadydefined",3]]],[[["str",15]],[["fixedsize",4],["option",4]]],[[["str",15]],[["usize",15],["option",4]]],[[],["bool",15]],[[["integer",4]],["bool",15]],[[["bigint",3]],["bool",15]],[[],["bool",15]],[[]],[[["integer",4]]],null,[[],[["option",4],["array",3]]],[[],[["option",4],["tuple",3]]],[[],[["option",4],["festring",3]]],[[],[["option",4],["map",3]]],[[],[["option",4],["integer",4]]],[[],["bool",15]],[[]],[[]],[[["sourcefileid",3],["module",3]],[["context",3],["result",4],["analyzererror",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["string",3]],[[],["string",3]],[[],[["vec",3],["abicomponent",3]]],[[],["abitype",4]],[[],["string",3]],[[],["string",3]],[[],[["vec",3],["abicomponent",3]]],[[],["abitype",4]],[[],["string",3]],[[],["string",3]],[[],[["vec",3],["abicomponent",3]]],[[],["abitype",4]],[[],["string",3]],[[],["string",3]],[[],[["vec",3],["abicomponent",3]]],[[],["abitype",4]],[[],["string",3]],[[],["string",3]],[[],[["vec",3],["abicomponent",3]]],[[],["abitype",4]],[[],["string",3]],[[],["string",3]],[[],[["vec",3],["abicomponent",3]]],[[],["abitype",4]],[[],["string",3]],[[],["string",3]],[[],[["vec",3],["abicomponent",3]]],[[],["abitype",4]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["shared",6],["contractscope",3]]],[[["contractfunctiondef",3]]],[[["shared",6],["modulescope",3]]],[[["fixedsize",4]]],[[["base",4]]],[[["base",4]]],[[["tuple",3]]],[[],["globalmethod",4]],[[],["location",4]],[[],["contractattributes",3]],[[],["expressionattributes",3]],[[],["calltype",4]],[[],["functionattributes",3]],[[],["moduleattributes",3]],[[],["context",3]],[[],["eventdef",3]],[[],["contractfunctiondef",3]],[[],["contractfielddef",3]],[[],["modulescope",3]],[[],["contractscope",3]],[[],["blockscope",3]],[[],["scope",4]],[[],["blockscopeparent",4]],[[],["blockscopetype",4]],[[],["abiuintsize",3]],[[],["abiarraysize",4]],[[],["abitype",4]],[[],["abidecodelocation",4]],[[],["abicomponent",3]],[[],["type",4]],[[],["fixedsize",4]],[[],["base",4]],[[],["integer",4]],[[],["array",3]],[[],["map",3]],[[],["tuple",3]],[[],["struct",3]],[[],["festring",3]],[[],["contract",3]],[[["functionattributes",3]],["ordering",4]],[[["abiuintsize",3]],["ordering",4]],[[["abiarraysize",4]],["ordering",4]],[[["abitype",4]],["ordering",4]],[[["abidecodelocation",4]],["ordering",4]],[[["abicomponent",3]],["ordering",4]],[[["fixedsize",4]],["ordering",4]],[[["base",4]],["ordering",4]],[[["integer",4]],["ordering",4]],[[["array",3]],["ordering",4]],[[["tuple",3]],["ordering",4]],[[["struct",3]],["ordering",4]],[[["festring",3]],["ordering",4]],[[["contract",3]],["ordering",4]],[[["valuemethod",4]],["bool",15]],[[["globalmethod",4]],["bool",15]],[[["contracttypemethod",4]],["bool",15]],[[["object",4]],["bool",15]],[[["blockfield",4]],["bool",15]],[[["chainfield",4]],["bool",15]],[[["msgfield",4]],["bool",15]],[[["txfield",4]],["bool",15]],[[["selffield",4]],["bool",15]],[[["location",4]],["bool",15]],[[["location",4]],["bool",15]],[[["contractattributes",3]],["bool",15]],[[["contractattributes",3]],["bool",15]],[[["expressionattributes",3]],["bool",15]],[[["expressionattributes",3]],["bool",15]],[[["calltype",4]],["bool",15]],[[["calltype",4]],["bool",15]],[[["functionattributes",3]],["bool",15]],[[["functionattributes",3]],["bool",15]],[[["moduleattributes",3]],["bool",15]],[[["moduleattributes",3]],["bool",15]],[[["indexingerror",4]],["bool",15]],[[["binaryoperationerror",4]],["bool",15]],[[["eventdef",3]],["bool",15]],[[["eventdef",3]],["bool",15]],[[["contractfunctiondef",3]],["bool",15]],[[["contractfunctiondef",3]],["bool",15]],[[["contractfielddef",3]],["bool",15]],[[["contractfielddef",3]],["bool",15]],[[["modulescope",3]],["bool",15]],[[["modulescope",3]],["bool",15]],[[["contractscope",3]],["bool",15]],[[["contractscope",3]],["bool",15]],[[["blockscope",3]],["bool",15]],[[["blockscope",3]],["bool",15]],[[["scope",4]],["bool",15]],[[["scope",4]],["bool",15]],[[["blockscopeparent",4]],["bool",15]],[[["blockscopeparent",4]],["bool",15]],[[["blockscopetype",4]],["bool",15]],[[["abiuintsize",3]],["bool",15]],[[["abiuintsize",3]],["bool",15]],[[["abiarraysize",4]],["bool",15]],[[["abiarraysize",4]],["bool",15]],[[["abitype",4]],["bool",15]],[[["abitype",4]],["bool",15]],[[["abidecodelocation",4]],["bool",15]],[[["abicomponent",3]],["bool",15]],[[["abicomponent",3]],["bool",15]],[[["type",4]],["bool",15]],[[["type",4]],["bool",15]],[[["fixedsize",4]],["bool",15]],[[["fixedsize",4]],["bool",15]],[[["base",4]],["bool",15]],[[["base",4]],["bool",15]],[[["integer",4]],["bool",15]],[[["array",3]],["bool",15]],[[["array",3]],["bool",15]],[[["map",3]],["bool",15]],[[["map",3]],["bool",15]],[[["tuple",3]],["bool",15]],[[["tuple",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["festring",3]],["bool",15]],[[["festring",3]],["bool",15]],[[["contract",3]],["bool",15]],[[["contract",3]],["bool",15]],[[["type",4]],["bool",15]],[[["functionattributes",3]],[["ordering",4],["option",4]]],[[["abiuintsize",3]],[["ordering",4],["option",4]]],[[["abiarraysize",4]],[["ordering",4],["option",4]]],[[["abitype",4]],[["ordering",4],["option",4]]],[[["abidecodelocation",4]],[["ordering",4],["option",4]]],[[["abicomponent",3]],[["ordering",4],["option",4]]],[[["fixedsize",4]],[["ordering",4],["option",4]]],[[["base",4]],[["ordering",4],["option",4]]],[[["integer",4]],[["ordering",4],["option",4]]],[[["array",3]],[["ordering",4],["option",4]]],[[["tuple",3]],[["ordering",4],["option",4]]],[[["struct",3]],[["ordering",4],["option",4]]],[[["festring",3]],[["ordering",4],["option",4]]],[[["contract",3]],[["ordering",4],["option",4]]],[[],["string",3]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["type",4]],[["typeerror",3],["result",4]]],[[["str",15]],[["result",4],["valuemethod",4]]],[[["str",15]],[["globalmethod",4],["result",4]]],[[["str",15]],[["result",4],["contracttypemethod",4]]],[[["str",15]],[["object",4],["result",4]]],[[["str",15]],[["blockfield",4],["result",4]]],[[["str",15]],[["chainfield",4],["result",4]]],[[["str",15]],[["result",4],["msgfield",4]]],[[["str",15]],[["txfield",4],["result",4]]],[[["str",15]],[["result",4],["selffield",4]]],[[["span",3]],["label",3]],[[["span",3]],["label",3]],[[["sourcefileid",3]],[["label",3],["sourcefileid",3]]]],"p":[[4,"ValueMethod"],[4,"GlobalMethod"],[4,"ContractTypeMethod"],[4,"Object"],[4,"BlockField"],[4,"ChainField"],[4,"MsgField"],[4,"TxField"],[4,"SelfField"],[3,"Label"],[4,"Location"],[13,"Storage"],[3,"ContractAttributes"],[3,"ExpressionAttributes"],[4,"CallType"],[13,"BuiltinFunction"],[13,"TypeConstructor"],[13,"SelfAttribute"],[13,"TypeAttribute"],[3,"FunctionAttributes"],[3,"ModuleAttributes"],[3,"Context"],[4,"IndexingError"],[4,"BinaryOperationError"],[3,"AnalyzerError"],[3,"EventDef"],[3,"ContractFunctionDef"],[3,"ContractFieldDef"],[3,"ModuleScope"],[3,"ContractScope"],[3,"BlockScope"],[4,"Scope"],[4,"BlockScopeParent"],[4,"BlockScopeType"],[8,"FeSized"],[3,"AbiUintSize"],[4,"AbiArraySize"],[13,"Static"],[4,"AbiType"],[13,"Array"],[13,"Tuple"],[13,"Uint"],[4,"AbiDecodeLocation"],[3,"AbiComponent"],[8,"AbiEncoding"],[8,"SafeNames"],[4,"Type"],[4,"FixedSize"],[4,"Base"],[4,"Integer"],[3,"Array"],[3,"Map"],[3,"Tuple"],[3,"Struct"],[3,"FeString"],[3,"Contract"],[8,"TypeDowncast"],[3,"AlreadyDefined"],[3,"FatalError"],[3,"CannotMove"],[3,"TypeError"]]},\
"fe_common":{"doc":"","t":[0,3,12,12,12,12,12,3,12,12,12,12,4,13,13,4,13,13,13,13,13,6,3,12,12,12,11,11,11,5,5,0,3,3,12,11,11,11,8,10,3,3,11,11,11,11,11,0,4,13,13,13,13,11,3,11,11,11,0,0,8,10,10,5,0,5,5,5,5,0,3,11,5,3,12,12,8,10,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["diagnostics","CsDiagnostic","severity","code","message","labels","notes","CsLabel","style","file_id","range","message","LabelStyle","Primary","Secondary","Severity","Bug","Error","Warning","Note","Help","Diagnostic","Label","style","span","message","primary","secondary","into_cs_label","print_diagnostics","diagnostics_string","files","SourceFile","SourceFileId","0","new","line_index","line_span","FileLoader","load_file","OsFileLoader","FileStore","new","with_loader","add_file","load_file","get_file","numeric","Radix","Hexadecimal","Decimal","Octal","Binary","as_num","Literal","new","parse","radix","utils","humanize","Pluralizable","to_plural","to_singular","pluralize_conditionally","keccak","full","partial_right_padded","partial","full_as_bytes","ron","Diff","new","to_ron_string_pretty","Span","start","end","Spanned","span","assert_strings_eq","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","hash","eq","ne","eq","eq","ne","eq","clone","clone","clone","clone","partial_cmp","partial_cmp","fmt","fmt","fmt","fmt","load_file","clone","clone","clone","clone","default","eq","ne","eq","eq","ne","fmt","fmt","fmt","fmt","fmt","add","add","add","add_assign","hash","hash","name","source","line_index","line_range","serialize","deserialize","new","bug","error","warning","note","help","with_code","with_message","with_labels","with_notes","new","primary","secondary","with_message","new","zero","from_pair"],"q":["fe_common","fe_common::diagnostics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_common","fe_common::files","","","","","","","","","","","","","","","fe_common","fe_common::numeric","","","","","","","","","","fe_common","fe_common::utils","fe_common::utils::humanize","","","","fe_common::utils","fe_common::utils::keccak","","","","fe_common::utils","fe_common::utils::ron","","","fe_common","","","","","","fe_common::diagnostics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_common::files","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_common::numeric","","","","","","","","","","","","","","","","","","fe_common","","","","","","","","","fe_common::utils::ron","","","","","","","","fe_common::diagnostics","","","","","","","","","","","","","","","","","fe_common::files","","fe_common::numeric","","fe_common","fe_common::files","","","fe_common::numeric","fe_common","","fe_common::files","fe_common::numeric","","fe_common","fe_common::utils::ron","fe_common","","","","fe_common::files","fe_common","fe_common::files","","","","fe_common","","fe_common::diagnostics","","","","","","","","","","","","","","fe_common","",""],"d":["","Represents a diagnostic message that can provide …","The overall severity of the diagnostic","An optional code that identifies this diagnostic.","The main message associated with this diagnostic.","Source labels that describe the cause of the diagnostic. …","Notes that are associated with the primary cause of the …","A label describing an underlined region of code …","The style of the label.","The file that we are labelling.","The range in bytes we are going to include in the final …","An optional message to provide some additional …","","Labels that describe the primary cause of a diagnostic.","Labels that provide additional context for a diagnostic.","A severity level for diagnostic messages.","An unexpected bug.","An error.","A warning.","A note.","A help message.","","","","","","Create a primary label with the given message. This will …","Create a secondary label with the given message. This …","Convert into a [<code>codespan_reporting::Diagnostic::Label</code>]","Print the given diagnostics to stderr.","Format the given diagnostics as a string.","","","","","","","","","","","","","","","","","","A type that represents the radix of a numeric literal.","","","","","Returns number representation of the radix.","A helper type to interpret a numeric literal represented …","","Parse the numeric literal to <code>T</code>.","Returns radix of the numeric literal.","","","A trait to derive plural or singular representations from","","","","","Get the full 32 byte hash of the content.","Take the first <code>size</code> number of bytes of the hash and pad …","Take the first <code>size</code> number of bytes of the hash with no …","Get the full 32 byte hash of the content as a byte array.","","Wrapper struct for formatting changesets from the …","","Convenience function to serialize objects in RON format …","An exclusive span of byte offsets in a source file.","A byte offset specifying the inclusive start of a span.","A byte offset specifying the exclusive end of a span.","","","Compare the given strings and panic when not equal with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new diagnostic.","Create a new diagnostic with a severity of <code>Severity::Bug</code>.","Create a new diagnostic with a severity of <code>Severity::Error</code>…","Create a new diagnostic with a severity of …","Create a new diagnostic with a severity of <code>Severity::Note</code>.","Create a new diagnostic with a severity of <code>Severity::Help</code>.","Set the error code of the diagnostic.","Set the message of the diagnostic.","Add some labels to the diagnostic.","Add some notes to the diagnostic.","Create a new label.","Create a new label with a style of <code>LabelStyle::Primary</code>.","Create a new label with a style of <code>LabelStyle::Secondary</code>.","Add a message to the diagnostic.","","",""],"i":[0,0,1,1,1,1,1,0,2,2,2,2,0,3,3,0,4,4,4,4,4,0,0,5,5,5,5,5,5,0,0,0,0,0,6,7,7,7,0,8,0,0,9,9,9,9,9,0,0,10,10,10,10,10,0,11,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,13,0,0,14,14,0,15,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,16,16,16,16,16,16,16,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,4,1,1,4,2,2,3,4,3,1,2,4,3,2,3,4,1,16,6,10,11,14,9,6,6,10,14,14,6,10,11,14,13,14,14,14,14,6,14,9,9,9,9,14,14,1,1,1,1,1,1,1,1,1,1,2,2,2,2,14,14,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3],["into",8],["string",3]]],[[["span",3],["into",8],["string",3]]],[[["sourcefileid",3]],[["cslabel",3],["sourcefileid",3]]],[[["filestore",3]]],[[["filestore",3]],["string",3]],null,null,null,null,[[["str",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],[["span",3],["option",4]]],null,[[["path",3]],[["string",3],["result",6]]],null,null,[[]],[[["box",3],["fileloader",8]]],[[["str",15]],["sourcefileid",3]],[[["str",15]],["result",6]],[[["sourcefileid",3]],[["option",4],["sourcefile",3]]],null,null,null,null,null,null,[[],["u32",15]],null,[[["str",15]]],[[],[["result",4],["num",8]]],[[],["radix",4]],null,null,null,[[],["string",3]],[[],["string",3]],[[["usize",15]],["string",3]],null,[[],["string",3]],[[["usize",15]],["string",3]],[[["usize",15]],["string",3]],[[]],null,null,[[["str",15]]],[[],[["string",3],["result",6]]],null,null,null,null,[[],["span",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["diagnostic",3]],["bool",15]],[[["diagnostic",3]],["bool",15]],[[["severity",4]],["bool",15]],[[["label",3]],["bool",15]],[[["label",3]],["bool",15]],[[["labelstyle",4]],["bool",15]],[[],["severity",4]],[[],["labelstyle",4]],[[],["diagnostic",3]],[[],["label",3]],[[["severity",4]],[["ordering",4],["option",4]]],[[["labelstyle",4]],[["ordering",4],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["path",3]],[["string",3],["result",6]]],[[],["sourcefileid",3]],[[],["radix",4]],[[],["literal",3]],[[],["span",3]],[[]],[[["sourcefileid",3]],["bool",15]],[[["sourcefileid",3]],["bool",15]],[[["radix",4]],["bool",15]],[[["span",3]],["bool",15]],[[["span",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["span",3],["option",4]]],[[["option",4]]],[[]],[[]],[[]],[[["sourcefileid",3]],[["cserror",4],["result",4]]],[[["sourcefileid",3]],[["cserror",4],["result",4]]],[[["usize",15],["sourcefileid",3]],[["result",4],["usize",15],["cserror",4]]],[[["usize",15],["sourcefileid",3]],[["cserror",4],["result",4],["range",3]]],[[],["result",4]],[[],["result",4]],[[["severity",4]],["diagnostic",3]],[[],["diagnostic",3]],[[],["diagnostic",3]],[[],["diagnostic",3]],[[],["diagnostic",3]],[[],["diagnostic",3]],[[],["diagnostic",3]],[[],["diagnostic",3]],[[["label",3],["global",3],["vec",3]],["diagnostic",3]],[[["vec",3],["global",3],["string",3]],["diagnostic",3]],[[["labelstyle",4]],["label",3]],[[],["label",3]],[[],["label",3]],[[],["label",3]],[[["usize",15]]],[[]],[[]]],"p":[[3,"CsDiagnostic"],[3,"CsLabel"],[4,"LabelStyle"],[4,"Severity"],[3,"Label"],[3,"SourceFileId"],[3,"SourceFile"],[8,"FileLoader"],[3,"FileStore"],[4,"Radix"],[3,"Literal"],[8,"Pluralizable"],[3,"Diff"],[3,"Span"],[8,"Spanned"],[3,"OsFileLoader"]]},\
"fe_compiler":{"doc":"Modules for compiling Fe and building ABIs.","t":[0,0,5,5,0,6,3,12,12,11,11,3,12,12,12,12,3,12,12,12,12,3,12,12,12,12,3,3,12,12,12,3,12,12,12,4,13,13,13,13,4,13,13,13,13,5,0,3,12,5,4,13,13,13,3,12,11,11,11,0,5,0,6,6,6,6,6,6,6,6,6,3,12,12,6,3,12,12,12,0,0,5,0,0,0,5,5,5,5,5,0,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["abi","utils","event_topic","func_selector","elements","ModuleAbis","Contract","events","functions","new","json","Event","name","typ","fields","anonymous","EventField","name","typ","indexed","components","Function","name","typ","inputs","outputs","Component","FuncInput","name","typ","components","FuncOutput","name","typ","components","FuncType","Function","Constructor","Receive","Fallback","StateMutability","Pure","View","Nonpayable","Payable","build","errors","AnalyzerError","0","install_compiler_panic_hook","ErrorKind","Str","Analyzer","Parser","CompileError","errors","new","static_str","str","lowering","lower","types","ContractName","FeModuleAst","JsonAbi","FeSrc","YulIr","Bytecode","NamedAbis","NamedYulContracts","NamedBytecodeContracts","CompiledContract","json_abi","yul","NamedContracts","CompiledModule","src_ast","lowered_ast","contracts","yul","constants","numeric_min_max","runtime","functions","abi","all","batch_encode","batch_decode","unpack","pack","contracts","all","calls","create2","create","data","all","avail","alloc","free","set_zero","ceil32","ccopym","mcopys","scopym","scopys","mcopym","mloadn","sloadn","cloadn","mstoren","sstoren","bytes_mcopys","bytes_scopym","bytes_scopys","bytes_sloadn","bytes_sstoren","alloc_mstoren","map_value_ptr","ternary","load_data_string","revert_with_reason_string","math","checked_add_fns","checked_div_fns","checked_exp_fns","checked_mod_fns","checked_mul_fns","checked_sub_fns","all","structs","generate_new_fn","generate_get_fn","struct_apis","std","build","build_with_abi_dispatcher","compile","compile","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","fmt","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize"],"q":["fe_compiler","fe_compiler::abi","fe_compiler::abi::utils","","fe_compiler::abi","fe_compiler::abi::elements","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_compiler::abi","fe_compiler","fe_compiler::errors","","","","","","","","","","","","fe_compiler","fe_compiler::lowering","fe_compiler","fe_compiler::types","","","","","","","","","","","","","","","","","fe_compiler","fe_compiler::yul","fe_compiler::yul::constants","fe_compiler::yul","fe_compiler::yul::runtime","fe_compiler::yul::runtime::functions","fe_compiler::yul::runtime::functions::abi","","","","","fe_compiler::yul::runtime::functions","fe_compiler::yul::runtime::functions::contracts","","","","fe_compiler::yul::runtime::functions","fe_compiler::yul::runtime::functions::data","","","","","","","","","","","","","","","","","","","","","","","","","","fe_compiler::yul::runtime::functions","fe_compiler::yul::runtime::functions::math","","","","","","","fe_compiler::yul::runtime::functions","fe_compiler::yul::runtime::functions::structs","","","fe_compiler::yul::runtime::functions","fe_compiler::yul::runtime","","fe_compiler::yul","fe_compiler","fe_compiler::abi::elements","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_compiler::errors","","","","","","","","","","","","","","","","","","","","","","","","fe_compiler::types","","","","","","","","","","","","","","","","fe_compiler::errors","fe_compiler::abi::elements","","fe_compiler::errors","","fe_compiler::abi::elements","","","","","","","","","","fe_compiler::errors","fe_compiler::abi::elements","","","","","","","","","","","","","","","","","","","","","","","","","fe_compiler::errors","","fe_compiler::abi::elements","","","","","","","",""],"d":["Fe to ABI builder.","","Formats the name and fields and calculates the 32 byte …","Formats the name and params and calculates the 4 byte …","Elements used to define contract ABIs.","The ABIs for each contract in a Fe module.","All public interfaces of a Fe contract.","All events defined in a contract.","All public functions defined in a contract.","","Serialize the contract into a valid JSON ABI.","An event interface.","The event’s name.","The type of an event (Always “event”).","All event fields.","True if the event was declared as anonymous.","A single event field.","The event field’s name.","The type of an event (e.g. u256, address, bytes100,…)","True if the field is part of the log’s topics, false if …","Components of a tuple. This field is excluded if there …","A function interface.","The function’s name.","The type of a function (Function, Constructor, Receive, …","All function inputs.","All function outputs.","Component of an ABI tuple.","A single function input.","The input’s name.","The input’s type.","Components of a tuple. This field is excluded if there …","A single function output.","The output’s name.","The output’s type.","Components of a tuple. This field is excluded if there …","The type of a public function.","","","","","The mutability of a public function.","","","","","Builds ABIs for each contract in the module.","Errors returned by the compilers and ABI builder.","","","","Errors can either be an object or static reference.","","","","List of errors encountered during compilation.","","","Create a single error with a static string.","Create a single error with a string object.","Fe Lowering.","Lowers the Fe source AST to a Fe HIR AST.","","The name of a Fe contract.","The AST of a Fe module.","The ABI of a contract as a string.","The source of a Fe module as a static string.","The intermediate representation of a contract as a string …","The bytecode of a contract as string object.","A mapping of contract names and their ABIs.","A mapping of contract names and their Yul IR.","A mapping of contract names and their bytecode.","The artifacts of a compiled contract.","","","A mapping of contract names and their artifacts.","The artifacts of a compiled module.","","","","Fe to Yul compiler.","","Return a hashmap containing min/max YUL literals for each …","","","","Return all abi runtime functions","Creates a batch of encoding function for the given type …","Creates a batch of decoding function for the given types …","Adds padding to array elements following the ABI standard.","Removes padding from array elements so that they may be …","","Return all contacts runtime functions","Builds a set of functions used to make calls to the given …","Function that executes the <code>create2</code> operation.","Function that executes the <code>create</code> operation.","","Return all data runtime functions","Returns the highest available pointer.","Allocate a given number of bytes.","Set the highest available pointer.","Set the given segment of the value (defined in bits) to …","Rounds a 256 bit value up to the nearest multiple of 32.","Copy calldata to a newly allocated segment of memory.","Copy memory to a given segment of storage.","Copy storage to a newly allocated segment of memory.","Copies a segment of storage to another segment of storage.","Copies a segment of memory to another segment of memory.","Read a value of n bytes from memory at the given address.","Read a value of n bytes at the given word address and …","Read a value of n bytes from calldata at the given …","Stores a value in memory, only modifying the given size …","Stores a value in storage, only modifying the given size …","Copy memory to a given segment of storage.","Copy storage to a newly allocated segment of memory.","Copies a segment of storage to another segment of storage.","Read a value of n bytes at the given byte address.","Stores a value in storage at the given address, only …","Stores a value in a newly allocated memory segment.","Derives the byte address of a value corresponding to a …","Evaluates the ternary expression and returns the result.","Load a static string from data into a newly allocated …","Revert with encoded reason string","","Return a vector of runtime functions for additions with …","Return a vector of runtime functions for divisions with …","Return a vector of runtime functions for exponentiation …","Return a vector of runtime functions for checked modulo …","Return a vector of runtime functions for multiplications …","Return a vector of runtime functions for subtraction with …","","","Generate a YUL function that can be used to create an …","Generate a YUL function that can be used to read a …","Builds a set of functions used to interact with structs …","Returns all functions that should be available during …","Builds the set of function statements that are needed …","Builds the set of function statements that are needed …","Compiles Fe source code to Yul.","Compiles the given Fe source code to all targetsi":[0,0,0,0,0,0,0,1,1,1,1,0,2,2,2,2,0,3,3,3,3,0,4,4,4,4,0,0,5,5,5,0,6,6,6,0,7,7,7,7,0,8,8,8,8,0,0,0,9,0,0,10,10,10,0,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,0,0,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,14,14,14,14,14,14,14,14,14,14,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,9,14,4,11,11,1,2,3,4,14,5,6,7,8,1,11,1,1,2,2,3,3,4,4,14,14,5,5,6,6,7,8,1,2,3,4,14,5,6,7,8,10,11,1,2,3,4,14,5,6,7,8],"f":[null,null,[[["vec",3],["string",3],["str",15]],["string",3]],[[["vec",3],["string",3],["str",15]],["string",3]],null,null,null,null,null,[[]],[[["bool",15]],[["compileerror",3],["string",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["context",3],["femoduleast",6]],[["result",4],["namedabis",6],["compileerror",3]]],null,null,null,[[]],null,null,null,null,null,null,[[]],[[["str",15]]],[[["str",15]]],null,[[["context",3],["femoduleast",6]],["femoduleast",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["hashmap",3],["integer",4]]],null,null,null,[[],[["statement",4],["vec",3]]],[[["vec",3],["vec",3]],[["statement",4],["vec",3]]],[[["vec",3]],[["statement",4],["vec",3]]],[[],["statement",4]],[[["abidecodelocation",4]],["statement",4]],null,[[],[["statement",4],["vec",3]]],[[["contract",3]],[["statement",4],["vec",3]]],[[],["statement",4]],[[],["statement",4]],null,[[],[["statement",4],["vec",3]]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],[[],["statement",4]],null,[[],[["statement",4],["vec",3]]],[[],[["statement",4],["vec",3]]],[[],[["statement",4],["vec",3]]],[[],[["statement",4],["vec",3]]],[[],[["statement",4],["vec",3]]],[[],[["statement",4],["vec",3]]],[[],[["statement",4],["vec",3]]],null,[[["struct",3]],["statement",4]],[[["struct",3],["str",15]],["statement",4]],[[["struct",3]],[["statement",4],["vec",3]]],[[],[["statement",4],["vec",3]]],[[["context",3],["node",3]],[["statement",4],["vec",3]]],[[["context",3],["node",3]],[["statement",4],["vec",3]]],[[["context",3],["femoduleast",6]],["namedyulcontracts",6]],[[["bool",15],["sourcefileid",3],["str",15]],[["compileerror",3],["compiledmodule",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["abicomponent",3]]],[[["functionattributes",3]]],[[["error",3]]],[[["error",4]]],[[],["contract",3]],[[],["event",3]],[[],["eventfield",3]],[[],["function",3]],[[],["component",3]],[[],["funcinput",3]],[[],["funcoutput",3]],[[],["functype",4]],[[],["statemutability",4]],[[]],[[]],[[["contract",3]],["bool",15]],[[["contract",3]],["bool",15]],[[["event",3]],["bool",15]],[[["event",3]],["bool",15]],[[["eventfield",3]],["bool",15]],[[["eventfield",3]],["bool",15]],[[["function",3]],["bool",15]],[[["function",3]],["bool",15]],[[["component",3]],["bool",15]],[[["component",3]],["bool",15]],[[["funcinput",3]],["bool",15]],[[["funcinput",3]],["bool",15]],[[["funcoutput",3]],["bool",15]],[[["funcoutput",3]],["bool",15]],[[["functype",4]],["bool",15]],[[["statemutability",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]]],"p":[[3,"Contract"],[3,"Event"],[3,"EventField"],[3,"Function"],[3,"FuncInput"],[3,"FuncOutput"],[4,"FuncType"],[4,"StateMutability"],[3,"AnalyzerError"],[4,"ErrorKind"],[3,"CompileError"],[3,"CompiledContract"],[3,"CompiledModule"],[3,"Component"]]},\
"fe_compiler_test_utils":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"fe_compiler_tests":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"fe_parser":{"doc":"","tn":["ast","Module","body","ModuleStmt","Pragma","version_requirement","TypeDef","name","typ","SimpleImport","names","FromImport","path","names","ContractDef","name","fields","body","StructDef","name","fields","TypeDesc","Unit","Base","base","Array","typ","dimension","Tuple","items","Generic","base","args","GenericArg","TypeDesc","Int","SimpleImportName","path","alias","FromImportPath","Absolute","path","Relative","parent_level","path","FromImportNames","Star","List","FromImportName","name","alias","Field","is_pub","is_const","name","typ","value","ContractStmt","EventDef","name","fields","FuncDef","is_pub","name","args","return_type","body","EventField","is_idx","name","typ","FuncDefArg","name","typ","FuncStmt","Return","value","VarDecl","target","typ","value","Assign","target","value","AugAssign","target","op","value","For","target","iter","body","While","test","body","If","test","body","or_else","Assert","test","msg","Emit","name","args","Expr","value","Pass","Break","Continue","Revert","VarDeclTarget","Name","Tuple","Expr","Ternary","if_expr","test","else_expr","BoolOperation","left","op","right","BinOperation","left","op","right","UnaryOperation","op","operand","CompOperation","left","op","right","Attribute","value","attr","Subscript","value","index","Call","func","generic_args","args","List","elts","Tuple","elts","Bool","Name","Num","Str","Unit","CallArg","label","value","BoolOperator","And","Or","BinOperator","Add","Sub","Mult","Div","Mod","Pow","LShift","RShift","BitOr","BitXor","BitAnd","UnaryOperator","Invert","Not","USub","CompOperator","Eq","NotEq","Lt","LtE","Gt","GtE","grammar","contracts","parse_contract_def","expressions","parse_expr","parse_expr_with_min_bp","parse_call_args","functions","parse_fn_def","parse_single_word_stmt","parse_stmt","parse_if_stmt","parse_while_stmt","parse_for_stmt","parse_return_stmt","parse_assert_stmt","parse_emit_statement","module","parse_module","parse_module_stmt","parse_simple_import","parse_from_import","parse_pragma","types","parse_struct_def","parse_type_def","parse_event_def","parse_event_field","parse_field","parse_opt_qualifier","parse_generic_args","parse_type_desc","lexer","Token","kind","text","span","TokenKind","Error","Newline","Indent","Dedent","Name","Int","Hex","Octal","Binary","Text","True","False","Assert","Break","Continue","Contract","Def","Const","Elif","Else","Emit","Event","Idx","If","Import","Pragma","Pass","For","Pub","Return","Revert","Struct","Type","While","And","As","In","Not","Or","ParenOpen","ParenClose","BracketOpen","BracketClose","BraceOpen","BraceClose","Colon","ColonColon","Comma","Semi","Plus","Minus","Star","Slash","Pipe","Amper","Lt","LtLt","Gt","GtGt","Eq","Dot","Percent","EqEq","NotEq","LtEq","GtEq","Tilde","Hat","StarStar","StarStarEq","PlusEq","MinusEq","StarEq","SlashEq","PercentEq","AmperEq","PipeEq","HatEq","LtLtEq","GtGtEq","Arrow","Lexer","new","source","node","Span","start","end","Spanned","span","NodeId","create","Node","kind","id","span","new","new_id","Token","kind","text","span","TokenKind","Error","Newline","Indent","Dedent","Name","Int","Hex","Octal","Binary","Text","True","False","Assert","Break","Continue","Contract","Def","Const","Elif","Else","Emit","Event","Idx","If","Import","Pragma","Pass","For","Pub","Return","Revert","Struct","Type","While","And","As","In","Not","Or","ParenOpen","ParenClose","BracketOpen","BracketClose","BraceOpen","BraceClose","Colon","ColonColon","Comma","Semi","Plus","Minus","Star","Slash","Pipe","Amper","Lt","LtLt","Gt","GtGt","Eq","Dot","Percent","EqEq","NotEq","LtEq","GtEq","Tilde","Hat","StarStar","StarStarEq","PlusEq","MinusEq","StarEq","SlashEq","PercentEq","AmperEq","PipeEq","HatEq","LtLtEq","GtGtEq","Arrow","Label","style","span","message","ParseFailed","ParseResult","Parser","diagnostics","parse_file","parse_code_chunk","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","add","add","add","serialize","hash","add_assign","eq","ne","clone","deserialize","fmt","from","from","from","from","from","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","cmp","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","ne","eq","eq","ne","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","add","add","hash","span","span","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","lex","friendly_str","symbol_str","primary","secondary","into_cs_label","new","as_bt_parser","next","peek_or_err","peek","peeked_text","split_next","done","last_indent","assert","expect","expect_with_notes","unexpected_token_error","enter_block","expect_newline","error","fancy_error","new","zero","from_pair"],"q":["fe_parser","fe_parser::ast","","","","fe_parser::ast::ModuleStmt","fe_parser::ast","fe_parser::ast::ModuleStmt","","fe_parser::ast","fe_parser::ast::ModuleStmt","fe_parser::ast","fe_parser::ast::ModuleStmt","","fe_parser::ast","fe_parser::ast::ModuleStmt","","","fe_parser::ast","fe_parser::ast::ModuleStmt","","fe_parser::ast","","","fe_parser::ast::TypeDesc","fe_parser::ast","fe_parser::ast::TypeDesc","","fe_parser::ast","fe_parser::ast::TypeDesc","fe_parser::ast","fe_parser::ast::TypeDesc","","fe_parser::ast","","","","","","","","fe_parser::ast::FromImportPath","fe_parser::ast","fe_parser::ast::FromImportPath","","fe_parser::ast","","","","","","","","","","","","","","fe_parser::ast::ContractStmt","","fe_parser::ast","fe_parser::ast::ContractStmt","","","","","fe_parser::ast","","","","","","","","","fe_parser::ast::FuncStmt","fe_parser::ast","fe_parser::ast::FuncStmt","","","fe_parser::ast","fe_parser::ast::FuncStmt","","fe_parser::ast","fe_parser::ast::FuncStmt","","","fe_parser::ast","fe_parser::ast::FuncStmt","","","fe_parser::ast","fe_parser::ast::FuncStmt","","fe_parser::ast","fe_parser::ast::FuncStmt","","","fe_parser::ast","fe_parser::ast::FuncStmt","","fe_parser::ast","fe_parser::ast::FuncStmt","","fe_parser::ast","fe_parser::ast::FuncStmt","fe_parser::ast","","","","","","","","","fe_parser::ast::Expr","","","fe_parser::ast","fe_parser::ast::Expr","","","fe_parser::ast","fe_parser::ast::Expr","","","fe_parser::ast","fe_parser::ast::Expr","","fe_parser::ast","fe_parser::ast::Expr","","","fe_parser::ast","fe_parser::ast::Expr","","fe_parser::ast","fe_parser::ast::Expr","","fe_parser::ast","fe_parser::ast::Expr","","","fe_parser::ast","fe_parser::ast::Expr","fe_parser::ast","fe_parser::ast::Expr","fe_parser::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_parser","fe_parser::grammar","fe_parser::grammar::contracts","fe_parser::grammar","fe_parser::grammar::expressions","","","fe_parser::grammar","fe_parser::grammar::functions","","","","","","","","","fe_parser::grammar","fe_parser::grammar::module","","","","","fe_parser::grammar","fe_parser::grammar::types","","","","","","","","fe_parser","fe_parser::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_parser","fe_parser::node","","","","","","","","","","","","","fe_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_parser::astfe_parser::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_parser","","","","","","","","","","","","","","","","","","","","","","fe_parser::node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_parser::lexer","fe_parser::ast","","","","","","","","","","","","","","","","","","","","fe_parser::lexer","","","fe_parser::node","","","","fe_parser::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fe_parser::lexer","","","fe_parser::node","","","","","fe_parser::ast","","","","","","","","","","","","","","","","","","","","fe_parser::lexer","","fe_parser","fe_parser::node","","fe_parser::ast","","","","fe_parser","fe_parser::node","","","fe_parser::ast","fe_parser::node","fe_parser::ast","","","","","","","","","","","","","","","","","","","","fe_parser::node","fe_parser::ast","","","","","","","","","","","","","","","","","","","","fe_parser::node","fe_parser::lexer","","","fe_parser","","","","","","","","","","","","","","","","","","","","fe_parser::node","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","struct or contract field, with optional ‘pub’ and ‘…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a contract definition.","","Parse an expression, starting with the next token.","Parse an expression, stopping if/when we reach an …","Parse call arguments","","Parse a function definition. The optional <code>pub</code> qualifier …","Parse a <code>continue</code>, <code>break</code>, <code>pass</code>, or <code>revert</code> statement.","Parse a function-level statement.","Parse an <code>if</code> statement, or an <code>elif</code> block.","Parse a <code>while</code> statement.","Parse a <code>for</code> statement.","Parse a <code>return</code> statement.","Parse an <code>assert</code> statement.","Parse an <code>emit</code> statement","","Parse a [<code>Module</code>].","Parse a [<code>ModuleStmt</code>].","Parse an <code>import</code> statement. This does not yet support …","Parse a <code>from x import y</code> style import statement.","Parse a <code>pragma <version-requirement></code> statement.","","Parse a [<code>ModuleStmt::StructDef</code>].","Parse a type definition, e.g. …","Parse an event definition.","Parse an event field, e.g. <code>foo: u8</code> or <code>idx from: address</code>.","Parse a field for a struct or contract. The leading …","Parse an optional qualifier (<code>pub</code>, <code>const</code>, or <code>idx</code>).","Parse an angle-bracket-wrapped list of generic arguments …","Parse a type description, e.g. <code>u8</code> or <code>Map<address, u256></code>.","","","","","","","","","Virtual tokens emitted by the parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new lexer with the given source code string.","Return the full source code string that’s being …","","An exclusive span of byte offsets in a source file.","A byte offset specifying the inclusive start of a span.","A byte offset specifying the exclusive end of a span.","","","","","","","","","","Sets a new node ID.","","","","","","","","Virtual tokens emitted by the parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Parser</code> maintains the parsing state, such as the token …","The diagnostics (errors and warnings) emitted during …","Parse a [<code>Module</code>] from the file content string.","Apply the given parsing function to the code string, …eturn a user-friendly description of the token kind. E.g.…","If the token is a symbol or keyword, return the string …","Create a primary label with the given message. This will …","Create a secondary label with the given message. This …","Convert into a [<code>codespan_reporting::Diagnostic::Label</code>]","Create a new parser for a source code string and …","Return as wrapped back tracking parser","Return the next token, or an error if we’ve reached the …","Take a peek at the next token kind without consuming it, …","Take a peek at the next token kind. Returns <code>None</code> if we’…","Peek at the text of the next token, without consuming it. …","Split the next token into two tokens, returning the …","Returns <code>true</code> if the parser has reached the end of the …","The leading whitespace string of the last-seen indented …","Assert that the next token kind it matches the expected …","If the next token matches the expected kind, return it. …","Like [<code>Parser::expect</code>], but with additional notes to be …","Emit an “unexpected token” error diagnostic with the …","Enter an indented block, which is expected to be …","Expect and consume one or more newlines, without …","Emit an error diagnostic, but don’t stop parsing","Emit a “fancy” error diagnostic with any number of …","","",""],"i":[0,0,1,0,2,3,2,4,4,2,5,2,6,6,2,7,7,7,2,8,8,0,9,9,10,9,11,11,9,12,9,13,13,0,14,14,0,15,15,0,16,17,16,18,18,0,19,19,0,20,20,0,21,21,21,21,21,0,22,23,23,22,24,24,24,24,24,0,25,25,25,0,26,26,0,27,28,27,29,29,29,27,30,30,27,31,31,31,27,32,32,32,27,33,33,27,34,34,34,27,35,35,27,36,36,27,37,27,27,27,27,0,38,38,0,39,40,40,40,39,41,41,41,39,42,42,42,39,43,43,39,44,44,44,39,45,45,39,46,46,39,47,47,47,39,48,39,49,39,39,39,39,39,0,50,50,0,51,51,0,52,52,52,52,52,52,52,52,52,52,52,0,53,53,53,0,54,54,54,54,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,57,57,0,0,58,58,0,59,0,60,0,61,61,61,61,61,0,55,55,55,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,62,62,62,0,0,0,63,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,62,62,62,62,62,62,62,64,64,64,64,64,64,64,64,63,63,63,63,63,63,63,58,58,58,58,58,58,58,58,58,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,58,58,58,58,58,58,58,58,58,58,58,61,58,58,60,60,57,1,2,9,14,15,16,19,20,21,22,25,26,27,38,39,50,51,52,53,54,55,56,57,60,61,60,60,1,1,2,2,9,9,14,14,15,15,16,16,19,19,20,20,21,21,22,22,25,25,26,26,27,27,38,38,39,39,50,50,51,52,53,54,55,55,56,60,60,61,61,60,1,2,9,14,15,16,19,20,21,22,25,26,27,38,39,50,51,52,53,54,55,56,64,60,61,51,52,53,54,64,58,58,60,14,61,1,2,9,14,15,16,19,20,21,22,25,26,27,38,39,50,51,52,53,54,61,1,2,9,14,15,16,19,20,21,22,25,26,27,38,39,50,51,52,53,54,61,56,56,56,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,58,58,58],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["parser",3]],[["parseresult",6],["node",3]]],null,[[["parser",3]],[["node",3],["parseresult",6]]],[[["parser",3],["u8",15]],[["node",3],["parseresult",6]]],[[["parser",3]],[["node",3],["parseresult",6]]],null,[[["parser",3],["option",4],["span",3]],[["node",3],["parseresult",6]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],null,[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],null,[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3]],[["node",3],["parseresult",6]]],[[["parser",3]],[["parseresult",6],["node",3]]],[[["parser",3],["option",4],["span",3]],[["parseresult",6],["node",3]]],[[["parser",3],["tokenkind",4]],[["option",4],["span",3]]],[[["parser",3]],[["node",3],["parseresult",6]]],[[["parser",3]],[["parseresult",6],["node",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["lexer",3]],[[],["str",15]],null,null,null,null,null,[[],["span",3]],null,[[]],null,null,null,null,[[["span",3]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["sourcefileid",3],["str",15]],[["vec",3],["result",4]]],[[["str",15]],["parseresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["span",3]],["span",3]],[[["option",4]],["span",3]],[[["span",3],["option",4]],["span",3]],[[],["result",4]],[[]],[[]],[[["span",3]],["bool",15]],[[["span",3]],["bool",15]],[[],["span",3]],[[],[["span",3],["result",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["token",3]],[["string",3],["node",3]]],[[["node",3]]],[[["box",3]]],[[["node",3]]],[[["box",3]]],[[],["option",4]],[[],["module",3]],[[],["modulestmt",4]],[[],["typedesc",4]],[[],["genericarg",4]],[[],["simpleimportname",3]],[[],["fromimportpath",4]],[[],["fromimportnames",4]],[[],["fromimportname",3]],[[],["field",3]],[[],["contractstmt",4]],[[],["eventfield",3]],[[],["funcdefarg",3]],[[],["funcstmt",4]],[[],["vardecltarget",4]],[[],["expr",4]],[[],["callarg",3]],[[],["booloperator",4]],[[],["binoperator",4]],[[],["unaryoperator",4]],[[],["compoperator",4]],[[],["token",3]],[[],["tokenkind",4]],[[],["lexer",3]],[[],["nodeid",3]],[[],["node",3]],[[],["nodeid",3]],[[["nodeid",3]],["ordering",4]],[[["module",3]],["bool",15]],[[["module",3]],["bool",15]],[[["modulestmt",4]],["bool",15]],[[["modulestmt",4]],["bool",15]],[[["typedesc",4]],["bool",15]],[[["typedesc",4]],["bool",15]],[[["genericarg",4]],["bool",15]],[[["genericarg",4]],["bool",15]],[[["simpleimportname",3]],["bool",15]],[[["simpleimportname",3]],["bool",15]],[[["fromimportpath",4]],["bool",15]],[[["fromimportpath",4]],["bool",15]],[[["fromimportnames",4]],["bool",15]],[[["fromimportnames",4]],["bool",15]],[[["fromimportname",3]],["bool",15]],[[["fromimportname",3]],["bool",15]],[[["field",3]],["bool",15]],[[["field",3]],["bool",15]],[[["contractstmt",4]],["bool",15]],[[["contractstmt",4]],["bool",15]],[[["eventfield",3]],["bool",15]],[[["eventfield",3]],["bool",15]],[[["funcdefarg",3]],["bool",15]],[[["funcdefarg",3]],["bool",15]],[[["funcstmt",4]],["bool",15]],[[["funcstmt",4]],["bool",15]],[[["vardecltarget",4]],["bool",15]],[[["vardecltarget",4]],["bool",15]],[[["expr",4]],["bool",15]],[[["expr",4]],["bool",15]],[[["callarg",3]],["bool",15]],[[["callarg",3]],["bool",15]],[[["booloperator",4]],["bool",15]],[[["binoperator",4]],["bool",15]],[[["unaryoperator",4]],["bool",15]],[[["compoperator",4]],["bool",15]],[[["token",3]],["bool",15]],[[["token",3]],["bool",15]],[[["tokenkind",4]],["bool",15]],[[["nodeid",3]],["bool",15]],[[["nodeid",3]],["bool",15]],[[["node",3]],["bool",15]],[[["node",3]],["bool",15]],[[["nodeid",3]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["token",3]]],[[["node",3]]],[[]],[[],["span",3]],[[],["span",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["lexer",3]]],[[],[["str",15],["option",4]]],[[],[["str",15],["option",4]]],[[["span",3]],["label",3]],[[["span",3]],["label",3]],[[["sourcefileid",3]],[["sourcefileid",3],["label",3]]],[[["sourcefileid",3],["str",15]]],[[],["btparser",3]],[[],[["token",3],["parseresult",6]]],[[],[["parseresult",6],["tokenkind",4]]],[[],[["tokenkind",4],["option",4]]],[[],["str",15]],[[],[["token",3],["parseresult",6]]],[[],["bool",15]],[[],["str",15]],[[["tokenkind",4]],["token",3]],[[["into",8],["tokenkind",4],["string",3]],[["token",3],["parseresult",6]]],[[["tokenkind",4]],[["token",3],["parseresult",6]]],[[["span",3],["vec",3],["into",8],["string",3]]],[[["span",3],["str",15]],["parseresult",6]],[[["str",15]],["parseresult",6]],[[["span",3],["into",8],["string",3]]],[[["vec",3],["vec",3],["into",8],["string",3],["label",3]]],[[["usize",15]],["span",3]],[[],["span",3]],[[],["span",3]]],"p":[[3,"Module"],[4,"ModuleStmt"],[13,"Pragma"],[13,"TypeDef"],[13,"SimpleImport"],[13,"FromImport"],[13,"ContractDef"],[13,"StructDef"],[4,"TypeDesc"],[13,"Base"],[13,"Array"],[13,"Tuple"],[13,"Generic"],[4,"GenericArg"],[3,"SimpleImportName"],[4,"FromImportPath"],[13,"Absolute"],[13,"Relative"],[4,"FromImportNames"],[3,"FromImportName"],[3,"Field"],[4,"ContractStmt"],[13,"EventDef"],[13,"FuncDef"],[3,"EventField"],[3,"FuncDefArg"],[4,"FuncStmt"],[13,"Return"],[13,"VarDecl"],[13,"Assign"],[13,"AugAssign"],[13,"For"],[13,"While"],[13,"If"],[13,"Assert"],[13,"Emit"],[13,"Expr"],[4,"VarDeclTarget"],[4,"Expr"],[13,"Ternary"],[13,"BoolOperation"],[13,"BinOperation"],[13,"UnaryOperation"],[13,"CompOperation"],[13,"Attribute"],[13,"Subscript"],[13,"Call"],[13,"List"],[13,"Tuple"],[3,"CallArg"],[4,"BoolOperator"],[4,"BinOperator"],[4,"UnaryOperator"],[4,"CompOperator"],[3,"Token"],[4,"TokenKind"],[3,"Lexer"],[3,"Span"],[8,"Spanned"],[3,"NodeId"],[3,"Node"],[3,"Label"],[3,"Parser"],[3,"ParseFailed"]]}\
}');
initSearch(searchIndex);